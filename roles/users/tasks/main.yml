---
- name: Ensure sudo group is present
  group:
    name: sudo
    state: present

- name: Ensure sudo group has sudo privileges
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: "^%sudo"
    line: "%sudo ALL=(ALL:ALL) ALL"
    validate: "/usr/sbin/visudo -cf %s"

- name: Setup users
  user:
    name: "{{ item.name }}"
    group: "{{ item.groups[0] }}"
    groups: "{{ item.groups | join(',') }}"
    password: "{% for user in vault_users | default([]) if user.name == item.name and user.password is defined %}{% if loop.first %}{{ user.password | password_hash('sha512', user.salt | default(None)) }}{% endif %}{% else %}{{ None }}{% endfor %}"
    state: present
    shell: /bin/bash
    update_password: always
  with_items: "{{ users }}"

- name: Add web user sudoers items for services
  template:
    src: sudoers.d.j2
    dest: "/etc/sudoers.d/{{ web_user }}-services"
    mode: 0440
    owner: root
    group: root
    validate: "/usr/sbin/visudo -cf %s"
  when: web_sudoers

- name: Add SSH keys
  authorized_key:
    user: "{{ item.0.name }}"
    key: "{{ item.1 }}"
  with_subelements:
    - "{{ users | default([]) }}"
    - keys

- name: Check whether Ansible can connect as admin_user
  local_action: command ansible {{ inventory_hostname }} -m ping -u {{ admin_user }} {{ cli_options | default('') }}
  failed_when: false
  changed_when: false
  become: no
  register: admin_user_status
  when: (ansible_user != admin_user and not sshd_permit_root_login) or (cli_ask_pass and not sshd_password_authentication)
  tags: [connection-tests, sshd]

- include: connection-warnings.yml
  when: admin_user_status | failed
  tags: [connection-tests, sshd]
